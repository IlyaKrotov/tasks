/**
 * @file: task/graph_impl.h 
 * Solution implementation of the programming task 2
 */

using namespace std;

namespace Task {


	//Node implementation:


	//Node constructor
	template <class NodeT, class EdgeT> Graph<NodeT, EdgeT>::Node::Node(Graph &g) : nodeGraph(g)
	{
		nodeId = g.countId.back();
		g.countId.pop_back();

		if (g.countId.empty())
		{
			g.countId.push_back(++nodeId);
		}
	}

	//Get iterator to the first predecessor edge
	template <class NodeT, class EdgeT> typename Graph<NodeT, EdgeT>::Node::pred_iterator Graph<NodeT, EdgeT>::Node::preds_begin()
	{
		return predEdgeIter.begin();
	}

	//Get end iterator for the predecessors
	template <class NodeT, class EdgeT> typename Graph<NodeT, EdgeT>::Node::pred_iterator Graph<NodeT, EdgeT>::Node::preds_end()
	{
		return predEdgeIter.end();
	}

	//Get iterator to the first successor edge
	template <class NodeT, class EdgeT> typename Graph<NodeT, EdgeT>::Node::succ_iterator Graph<NodeT, EdgeT>::Node::succs_begin()
	{
		return succEdgeIter.begin();
	}

	//Get end iterator for the successors
	template <class NodeT, class EdgeT> typename Graph<NodeT, EdgeT>::Node::succ_iterator Graph<NodeT, EdgeT>::Node::succs_end()
	{
		return succEdgeIter.end();
	}

	//Convinience routine returns first predecessor edge or throws an exception
	template <class NodeT, class EdgeT> EdgeT& Graph<NodeT, EdgeT>::Node::first_pred()
	{
		if (predEdgeIter.size())
		{
			return *predEdgeIter.front();
		}
		else
		{
			throw Error("Error in first_pred() function");
		}

	}

	//Convinience routine returns first successor edge or throws an exception
	template <class NodeT, class EdgeT> EdgeT& Graph<NodeT, EdgeT>::Node::first_succ()
	{
		if (succEdgeIter.size())
		{
			return *succEdgeIter.front();
		}
		else
		{
			throw Error("Error in first_succ() function");
		}
	}

	//Get the graph reference
	template <class NodeT, class EdgeT> Graph<NodeT, EdgeT>& Graph<NodeT, EdgeT>::Node::graph()
	{
		return nodeGraph;
	}

	//Get the node's unique id 
	template <class NodeT, class EdgeT> typename Graph<NodeT, EdgeT>::UId Graph<NodeT, EdgeT>::Node::uid() const
	{
		return nodeId;
	}
	
	//Get the number of predecessors
	template <class NodeT, class EdgeT> UInt32 Graph<NodeT, EdgeT>::Node::num_preds() const
	{
		return predEdgeIter.size();
	}

	//Get the number of successors
	template <class NodeT, class EdgeT> UInt32 Graph<NodeT, EdgeT>::Node::num_succs() const
	{
		return succEdgeIter.size();
	}

	
	//Edge implementation:


	//Construct an edge between given nodes
	template <class NodeT, class EdgeT> Graph<NodeT, EdgeT>::Edge::Edge(NodeT& p, NodeT& s) : edgeGraph(p.nodeGraph), predNode(p), succNode(s)
	{
		edgeId = edgeGraph.countId.back();
		edgeGraph.countId.pop_back();

		if (edgeGraph.countId.empty())
		{
			edgeGraph.countId.push_back(++edgeId);
		}

	}

	//Get edge predecessor
	template <class NodeT, class EdgeT> NodeT& Graph<NodeT, EdgeT>::Edge::pred()
	{
		return predNode;
	}

	//Get edge successor
	template <class NodeT, class EdgeT> NodeT& Graph<NodeT, EdgeT>::Edge::succ()
	{
		return succNode;
	}

	//Get the graph
	template <class NodeT, class EdgeT> Graph<NodeT, EdgeT>& Graph<NodeT, EdgeT>::Edge::graph()
	{
		return edgeGraph;
	}

	//Get the edge's unique id
	template <class NodeT, class EdgeT> typename Graph<NodeT, EdgeT>::UId Graph<NodeT, EdgeT>::Edge::uid() const
	{
		return edgeId;
	}


	//Graph implementation:


	//Get the iterator to the first node
	template <class NodeT, class EdgeT> typename Graph<NodeT, EdgeT>::node_iterator Graph<NodeT, EdgeT>::nodes_begin()
	{
		return nodeList.begin();
	}

	//Get the end iterator for the nodes
	template <class NodeT, class EdgeT> typename Graph<NodeT, EdgeT>::node_iterator Graph<NodeT, EdgeT>::nodes_end()
	{
		return nodeList.end();
	}

	//Get the iterator to the first edge
	template <class NodeT, class EdgeT> typename Graph<NodeT, EdgeT>::edge_iterator Graph<NodeT, EdgeT>::edges_begin()
	{
		return edgeList.begin();
	}

	//Get the end iterator for the edges
	template <class NodeT, class EdgeT> typename Graph<NodeT, EdgeT>::edge_iterator Graph<NodeT, EdgeT>::edges_end()
	{
		return edgeList.end();
	}

	//Get the number of edges
	template <class NodeT, class EdgeT> UInt32 Graph<NodeT, EdgeT>::num_edges() const
	{
		return edgeList.size();
	}

	//Get the number of nodes
	template <class NodeT, class EdgeT> UInt32 Graph<NodeT, EdgeT>::num_nodes() const
	{
		return nodeList.size();
	}

	//Create a new node and return reference to it
	template <class NodeT, class EdgeT> NodeT& Graph<NodeT, EdgeT>::create_node()
	{
		nodeList.emplace_back(*this);
		NodeT &tmpNode = nodeList.back();
		tmpNode.iter = --nodeList.end();
		return tmpNode;
	}

	//Create a new edge between given nodes
	template <class NodeT, class EdgeT> EdgeT& Graph<NodeT, EdgeT>::create_edge(NodeT& pred, NodeT& succ)
	{			

			edgeList.emplace_back(pred, succ);

			EdgeT &tmpEdge = edgeList.back();
			tmpEdge.iter = --edgeList.end();
			
			pred.succEdgeIter.push_back(tmpEdge.iter);
			succ.predEdgeIter.push_back(tmpEdge.iter);
			
			tmpEdge.predIter = --pred.succEdgeIter.end();
			tmpEdge.succIter = --succ.predEdgeIter.end();
			
			return tmpEdge;
	}

	//Remove and delete node
	template <class NodeT, class EdgeT> void Graph<NodeT, EdgeT>::remove(NodeT& node)
	{
		if(nodeList.size())
		{
			throw Error("Error in remove(node) function");
		};		

		for (int i = 0; i < (int)node.num_preds(); i++)
		{
			remove(*node.predEdgeIter.front());
		};
		
		for (int i = 0; i < (int)node.num_succs(); i++)
		{
			remove(*node.succEdgeIter.front());
		};

		countId.push_back(node.nodeId);
		nodeList.erase(node.iter);

	}

	//Remove and delete edge
	template <class NodeT, class EdgeT> void Graph<NodeT, EdgeT>::remove(EdgeT& edge)
	{
		/*if(edgeList.size())
		{
			throw Error("Error in remove(edge) function");
		};
*/
		edge.predNode.succEdgeIter.erase(edge.predIter);
		edge.succNode.predEdgeIter.erase(edge.succIter);

		countId.push_back(edge.edgeId);
		edgeList.erase(edge.iter);
	}

}; // namespace Task
